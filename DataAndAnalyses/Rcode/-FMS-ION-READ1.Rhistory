# Chunk 31
m = lmerTest::lmer(log(R) ~ WordFreq  + (1|ParticipantIdentifier),  data = results_ByFreq)
s=summary(m)
c = s$coefficients
sigma = 1.293 # don't know how to read this off the fitted model but I've taken it from the SD of residuals.
mHi = c["(Intercept)","Estimate"]
mLo = mHi + c["WordFreqLoFreq","Estimate"]
xx=seq(min(log(results_AllFreq$R)),max(log(results_AllFreq$R)),length=100)
fitHi = data.frame(xx)
fitHi$pdf = dnorm(xx,mean=mHi,sd=sigma)
fitLo = data.frame(xx)
fitLo$pdf = dnorm(xx,mean=mLo,sd=sigma)
ggplot() + geom_freqpoly(data=results_ByFreq,aes(x=log(R),y=..density..,color=WordFreq),bins=30) +
geom_vline(xintercept=mHi,color="red" ) + geom_vline(xintercept=mLo,color="blue" ) + geom_line(data=fitHi,aes(x=xx,y=pdf),color="red") +
geom_line(data=fitLo,aes(x=xx,y=pdf),color="blue")
# NB this is the same thing if you fit by order as well:
# m = lmerTest::lmer(log(R) ~ WordFreq + OrderCondition  + (1|ParticipantIdentifier),  data = results_ByFreq)
# s=summary(m)
# c = s$coefficients
# sigma = 1.293 # don't know how to read this off the fitted model but I've taken it from the SD of residuals.
# mHiClumped = c["(Intercept)","Estimate"]
# mLoClumped = mHiClumped + c["WordFreqLoFreq","Estimate"]
# mHiEven = mHiClumped + c["OrderConditionEven","Estimate"]
# mLoEven = mLoClumped + c["OrderConditionEven","Estimate"]
# xx=seq(min(log(results_AllFreq$R)),max(log(results_AllFreq$R)),length=100)
# fitHi = data.frame(xx)
# fitHi$pdf = dnorm(xx,mean=mHiClumped,sd=sigma)
# fitLo = data.frame(xx)
# fitLo$pdf = dnorm(xx,mean=mLoClumped,sd=sigma)
# ggplot() + geom_freqpoly(data=results_ByFreq,aes(x=log(R),y=..density..,color=WordFreq),bins=30) +
#    geom_vline(xintercept=mHiClumped,color="red" ) + geom_vline(xintercept=mLoClumped,color="blue" ) +
#    geom_vline(xintercept=mHiEven,color="red",linetype = "longdash" ) + geom_vline(xintercept=mLoEven,color="blue" ,linetype = "longdash") +
#   geom_line(data=fitHi,aes(x=xx,y=pdf),color="red") +
#   geom_line(data=fitLo,aes(x=xx,y=pdf),color="blue")
# Chunk 32
ggplot()+geom_freqpoly(aes(x=s$residuals),bins=30)
# Chunk 33
m = glmer(R ~ WordFreq  + (1|ParticipantIdentifier), data = results_ByFreq, family = Gamma(link=log))
s=summary(m)
c=s$coefficients
meanHi = exp(c["(Intercept)","Estimate"]) # intercept term
meanLo = exp(c["(Intercept)","Estimate"]+c["WordFreqLoFreq","Estimate"]) # intercept term + x=1
#dispersion is 1/shape parameter of gamma
sigma = 0.8826  # SD of residuals
shape = 1/sigma^2
rr=seq(cutoff,max(results_ByFreq$R),length=100)
fitHi = data.frame(rr)
fitHi$pdf = dgamma(rr,shape=shape,scale = meanHi/shape)
fitLo = data.frame(rr)
fitLo$pdf = dgamma(rr,shape=shape,scale = meanLo/shape)
ggplot()+geom_freqpoly(data=results_ByFreq,aes(x=R,y=..density..,color=WordFreq),bins=20)+
geom_line(data=fitHi,aes(x=rr,y=pdf),color="red")+
geom_line(data=fitLo,aes(x=rr,y=pdf),color="blue") +
geom_vline(xintercept=meanHi,color="red" ) + geom_vline(xintercept=meanLo,color="blue" )
# Chunk 34
m = glm(R ~ OrderCondition, data = results_AllFreq, family = Gamma(link=log))
meanClumped = exp(m$coefficients[1]) # intercept term
meanEven = exp(m$coefficients[1]+m$coefficients[2]) # intercept term + x=1
#dispersion is 1/shape parameter of gamma
shape = MASS::gamma.shape(m)$alpha
rr=seq(cutoff,max(results_AllFreq$R),length=100)
fitEven = data.frame(rr)
fitEven$pdf = dgamma(rr,shape=shape,scale = meanEven/shape)
fitClumped = data.frame(rr)
fitClumped$pdf = dgamma(rr,shape=shape,scale = meanClumped/shape)
ggplot()+geom_freqpoly(data=results_ByFreq,aes(x=R,y=..density..,color=WordFreq),bins=20)+
geom_line(data=fitClumped,aes(x=rr,y=pdf),color="red")+
geom_line(data=fitEven,aes(x=rr,y=pdf),color="blue") +
geom_vline(xintercept=meanEven,color="red" ) + geom_vline(xintercept=meanClumped,color="blue" )
# Chunk 35
results_AllFreq = results_AllFreq[order(results_AllFreq$CompletionDate),]
n = nrow(results_AllFreq)
p = replicate(n,NA)
for (j in 15:n) {
wR2 = wilcox.test(R~OrderCondition,data=results_AllFreq[1:j,])
p[j] = wR2$p.value
}
robustness = data.frame(ndata = seq(1:n), Rsignificance = p)
ggplot(data=robustness,aes(x=ndata,y=Rsignificance)) + geom_line(color="red") + geom_hline(yintercept = 0.05, color="blue")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggbeeswarm)
library(lme4)
library(tidyr)
library(dplyr)
library(lmerTest)
theme_set(theme_classic())
results = read.csv("../output/results.csv")
# For some plots, we will want data in wider format
tmp = results[,c("ParticipantIdentifier","AUROCnofit","AUROC","R","dprime","WordFreq","OrderCondition")]
freqresults = pivot_wider(tmp,names_from="WordFreq",values_from=c("AUROCnofit","AUROC","R","dprime"))
# Some initial processing. First of all, logs can't cope with 0s so replace these:
cutoff = 1e-2
results$dprime[results$dprime<cutoff] = cutoff
results$R[results$R<cutoff] = cutoff
# Make a normalised AUROC
results$AUROCnorm = 2*(results$AUROC-0.5)
results$AUROCnorm[results$AUROCnorm<0]=0.1
# Our fitted AUROC should of course already be positive, but it ends up being -6.3342e-05 for some fits,
# I'm assuming due to rounding error etc.
# We will also be fitting separately for fits done using all data vs using subsets
results_AllFreq = results[results$WordFreq=="AllFreq",]
results_ByFreq = results[results$WordFreq!="AllFreq",]
# Chunk 2
# Get unique participants
ppts = as.data.frame(results %>% group_by(ParticipantIdentifier) %>% summarise(Age = mean(Age), NativeSpeaker = NativeSpeaker[1], Bilingual = Bilingual[1],Gender = Gender[1]))
Age = ppts$Age
nUnknownAge = sum(is.na(Age))
Age = Age[!is.na(Age)]
# Chunk 3
ggplot(data=results_AllFreq,aes(x=AUROCnofit,y=AUROC))+ geom_point(aes(color=OrderCondition)) + geom_abline(intercept=0,slope=1,color="black")
# Chunk 4
ggplot(data=freqresults,aes(x=AUROCnofit_LoFreq,y=AUROCnofit_HiFreq,color=OrderCondition))+ geom_point() + geom_smooth(method="lm") + geom_abline(intercept=0,slope=1,color="black")
r = cor.test(freqresults$AUROCnofit_LoFreq,freqresults$AUROCnofit_HiFreq,method = "spearman")
w= wilcox.test(freqresults$AUROCnofit_LoFreq,freqresults$AUROCnofit_HiFreq,paired=TRUE)
# Chunk 5
ggplot(data=results_AllFreq,aes(x=OrderCondition,y=AUROCnofit))+ geom_boxplot(outlier.shape=NA)+ geom_quasirandom(aes(color=StartCondition) )
# Chunk 6
ggplot(data=results_ByFreq,aes(x=OrderCondition,y=AUROCnofit,color=WordFreq))+ geom_boxplot(outlier.shape=NA)+ geom_quasirandom()
# Chunk 7
ggplot(data=results_AllFreq,aes(x=OrderCondition,y=AUROC))+ geom_boxplot(outlier.shape=NA)+ geom_quasirandom(aes(color=StartCondition) )
# Chunk 8
ggplot(data=results_AllFreq,aes(x=OrderCondition,y=AUROC,color=StartCondition))+ geom_boxplot(outlier.shape=NA)+ geom_quasirandom()
# Chunk 9
ggplot(data=results_ByFreq,aes(x=OrderCondition,y=AUROC,color=WordFreq))+ geom_boxplot(outlier.shape=NA)+ geom_quasirandom()
# Chunk 10
ggplot(data=freqresults,aes(x=AUROC_LoFreq,y=AUROC_HiFreq,color=OrderCondition))+ geom_point() + geom_smooth(method="lm") + geom_abline(intercept=0,slope=1,color="black")
r = cor.test(freqresults$AUROC_LoFreq,freqresults$AUROC_HiFreq,method = "spearman")
w= wilcox.test(freqresults$AUROC_LoFreq,freqresults$AUROC_HiFreq,paired=TRUE)
# Chunk 11
ggplot(data=results_AllFreq,aes(x=OrderCondition,y=dprime,color=StartCondition))+ geom_boxplot(outlier.shape=NA)+ geom_quasirandom()
# Chunk 12
ggplot(data=results_ByFreq,aes(x=OrderCondition,y=dprime,color=WordFreq))+ geom_boxplot(outlier.shape=NA)+ geom_quasirandom()
# Chunk 13
ggplot(data=freqresults,aes(x=dprime_LoFreq,y=dprime_HiFreq,color=OrderCondition))+ geom_point() + geom_smooth(method="lm") + geom_abline(intercept=0,slope=1,color="black")
r = cor.test(freqresults$dprime_LoFreq,freqresults$dprime_HiFreq,method = "spearman")
w= wilcox.test(freqresults$dprime_LoFreq,freqresults$dprime_HiFreq,paired=TRUE)
# Chunk 14
ggplot(data=results_AllFreq,aes(x=OrderCondition,y=R))+ geom_boxplot(outlier.shape=NA)+ geom_quasirandom(aes(color=StartCondition) )
# Chunk 15
ggplot(data=results_AllFreq,aes(x=OrderCondition,y=R,color=StartCondition))+ geom_boxplot(outlier.shape=NA)+ geom_quasirandom()
# Chunk 16
ggplot(data=results_ByFreq,aes(x=OrderCondition,y=R,color=WordFreq))+ geom_boxplot(outlier.shape=NA)+ geom_quasirandom()
# Chunk 17
ggplot(data=freqresults,aes(x=R_LoFreq,y=R_HiFreq,color=OrderCondition))+ geom_point() +
geom_smooth(method="lm") + geom_abline(intercept=0,slope=1,color="black")
r = cor.test(freqresults$R_LoFreq,freqresults$R_HiFreq,method = "spearman")
w = wilcox.test(freqresults$R_LoFreq,freqresults$R_HiFreq,paired=TRUE)
print(w)
# Chunk 18: correlation
g = ggplot(data=results_AllFreq,aes(x=dprime,y=R,color=OrderCondition))+ geom_point() + geom_smooth(method="lm")
print(g)
#tiff(filename="..\\output\\Fig_Correlation.tif")
#print(g)
#dev.off()
rp = cor.test(results$dprime,results$R,method = "pearson")
rs = cor.test(results$dprime,results$R,method = "spearman")
# Chunk 19
ggplot()+geom_freqpoly(data=results_AllFreq,aes(x=AUROC,y=..density..,color=OrderCondition),bins=30)
# Chunk 20
#m = lme4::glmer(AUROCnorm ~ WordFreq+ OrderCondition +StartCondition + (1|ParticipantIdentifier), data = results_ByFreq, family = Gamma(link = log))
m = lme4::glmer(AUROCnorm ~ WordFreq+ OrderCondition  + (1|ParticipantIdentifier), data = results_ByFreq, family = Gamma(link = log))
print(summary(m))
# Chunk 21
# Models I examined but do not print out:
#m = lme4::glmer(AUROC ~ WordFreq  + (1|ParticipantIdentifier), data = results_ByFreq,family=Gamma(link="log"))
#m = lmerTest::lmer(AUROC ~ WordFreq + OrderCondition  + StartCondition + (1|ParticipantIdentifier), data = results_ByFreq)
#m = lmerTest::lmer(AUROC ~ WordFreq* OrderCondition  + (1|ParticipantIdentifier), data = results_ByFreq)
# Best model which I am therefore printing out:
m = lmerTest::lmer(AUROC ~ WordFreq+ OrderCondition  + (1|ParticipantIdentifier), data = results_ByFreq)
print(summary(m))
# Chunk 22
# Started from this model with main effects  & interaction
#m = lm(AUROC ~ OrderCondition*StartCondition, data = results_AllFreq)
#drop1(m,test="Chisq")
# used drop1 to drop terms not worth including; ended up with this:
m = glm(AUROCnorm ~ OrderCondition, data = results_AllFreq, family = Gamma(link=log))
print(summary(m))
#m = lm(AUROC ~ OrderCondition, data = results_AllFreq)
#
# Chunk 23
m = glm(AUROCnorm ~  OrderCondition, data = results_AllFreq, family = Gamma(link=log))
meanClumped = exp(m$coefficients[1]) # intercept term
meanEven = exp(m$coefficients[1]+m$coefficients[2]) # intercept term + x=1
#dispersion is 1/shape parameter of gamma
shape = MASS::gamma.shape(m)$alpha
rr=seq(min(results_AllFreq$AUROCnorm),max(results_AllFreq$AUROCnorm),length=100)
fitEven = data.frame(rr)
fitEven$pdf = dgamma(rr,shape=shape,scale = meanEven/shape)
fitClumped = data.frame(rr)
fitClumped$pdf = dgamma(rr,shape=shape,scale = meanClumped/shape)
ggplot()+geom_freqpoly(data=results_AllFreq,aes(x=AUROCnorm,y=..density..,color=OrderCondition),bins=20)+
geom_line(data=fitClumped,aes(x=rr,y=pdf),color="red")+
geom_line(data=fitEven,aes(x=rr,y=pdf),color="blue") +
geom_vline(xintercept=meanEven,color="red" ) + geom_vline(xintercept=meanClumped,color="blue" )
# Chunk 24
m = glmer(AUROCnorm ~ WordFreq  + (1|ParticipantIdentifier), data = results_ByFreq, family = Gamma(link=log))
s=summary(m)
c=s$coefficients
meanHi = exp(c["(Intercept)","Estimate"])# intercept term
meanLo = exp(c["(Intercept)","Estimate"]+c["WordFreqLoFreq","Estimate"])# intercept term
#dispersion is 1/shape parameter of gamma
shape =2.618# MASS::gamma.shape doesn't work on glmMerMod objects but I think this is it -1/sigma^2 where sigma is the std dev of residuals
rr=seq(min(results_ByFreq$AUROCnorm),max(results_ByFreq$AUROCnorm),length=100)
fitHi = data.frame(rr)
fitHi$pdf = dgamma(rr,shape=shape,scale = meanHi/shape)
fitLo = data.frame(rr)
fitLo$pdf = dgamma(rr,shape=shape,scale = meanLo/shape)
ggplot()+geom_freqpoly(data=results_ByFreq,aes(x=AUROCnorm,y=..density..,color=WordFreq),bins=30)+
geom_line(data=fitHi,aes(x=rr,y=pdf),color="red")+
geom_line(data=fitLo,aes(x=rr,y=pdf),color="blue") +
geom_vline(xintercept=meanHi,color="red" ) + geom_vline(xintercept=meanLo,color="blue" )
# Chunk 25
ggplot()+geom_freqpoly(data=results_AllFreq,aes(x=(dprime),y=..density..,color=OrderCondition),bins=30)
# Chunk 26
m = lme4::glmer(dprime ~ WordFreq*OrderCondition    + (1|ParticipantIdentifier),
data = results_ByFreq, family = Gamma(link=log),
control=glmerControl(optimizer = "optimx", calc.derivs = FALSE,                            optCtrl=list(method="bobyqa")))
print(summary(m))
# Chunk 27
ggplot()+geom_freqpoly(data=results_AllFreq,aes(x=R,y=..density..,color=OrderCondition),bins=30)
# Chunk 28
# I started with this
#m = lme4::glmer(R ~ WordFreq + StartCondition + OrderCondition  + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log))
# Used drop1 to remove StartCondition, then checked
#m = lme4::glmer(R ~ WordFreq * OrderCondition  + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log))
m = lme4::glmer(R ~ WordFreq + OrderCondition  + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log))
print(summary(m))
# Chunk 29
m = lmerTest::lmer(log(R) ~ WordFreq + OrderCondition  + (1|ParticipantIdentifier),  data = results_ByFreq)
summary(m)
# Also checked
#m = lmerTest::lmer(log(R) ~ WordFreq * OrderCondition  + (1|ParticipantIdentifier),  data = results_ByFreq)
# but interaction was NS
#m = lme4::glmer(dprime ~ WordFreq  + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log))
# Fit is singular with no significant effects
#m = lmerTest::lmer(R ~ WordFreq + OrderCondition + StartCondition  + (1|ParticipantIdentifier),  data = results_ByFreq)
# Chunk 30
m = glm(R ~  OrderCondition   , data = results_AllFreq, family = Gamma(link=log))
print(summary(m))
m = lm(log(R) ~  OrderCondition   , data = results_AllFreq)
print(summary(m))
# Chunk 31
m = lmerTest::lmer(log(R) ~ WordFreq  + (1|ParticipantIdentifier),  data = results_ByFreq)
s=summary(m)
c = s$coefficients
sigma = 1.293 # don't know how to read this off the fitted model but I've taken it from the SD of residuals.
mHi = c["(Intercept)","Estimate"]
mLo = mHi + c["WordFreqLoFreq","Estimate"]
xx=seq(min(log(results_AllFreq$R)),max(log(results_AllFreq$R)),length=100)
fitHi = data.frame(xx)
fitHi$pdf = dnorm(xx,mean=mHi,sd=sigma)
fitLo = data.frame(xx)
fitLo$pdf = dnorm(xx,mean=mLo,sd=sigma)
ggplot() + geom_freqpoly(data=results_ByFreq,aes(x=log(R),y=..density..,color=WordFreq),bins=30) +
geom_vline(xintercept=mHi,color="red" ) + geom_vline(xintercept=mLo,color="blue" ) + geom_line(data=fitHi,aes(x=xx,y=pdf),color="red") +
geom_line(data=fitLo,aes(x=xx,y=pdf),color="blue")
# NB this is the same thing if you fit by order as well:
# m = lmerTest::lmer(log(R) ~ WordFreq + OrderCondition  + (1|ParticipantIdentifier),  data = results_ByFreq)
# s=summary(m)
# c = s$coefficients
# sigma = 1.293 # don't know how to read this off the fitted model but I've taken it from the SD of residuals.
# mHiClumped = c["(Intercept)","Estimate"]
# mLoClumped = mHiClumped + c["WordFreqLoFreq","Estimate"]
# mHiEven = mHiClumped + c["OrderConditionEven","Estimate"]
# mLoEven = mLoClumped + c["OrderConditionEven","Estimate"]
# xx=seq(min(log(results_AllFreq$R)),max(log(results_AllFreq$R)),length=100)
# fitHi = data.frame(xx)
# fitHi$pdf = dnorm(xx,mean=mHiClumped,sd=sigma)
# fitLo = data.frame(xx)
# fitLo$pdf = dnorm(xx,mean=mLoClumped,sd=sigma)
# ggplot() + geom_freqpoly(data=results_ByFreq,aes(x=log(R),y=..density..,color=WordFreq),bins=30) +
#    geom_vline(xintercept=mHiClumped,color="red" ) + geom_vline(xintercept=mLoClumped,color="blue" ) +
#    geom_vline(xintercept=mHiEven,color="red",linetype = "longdash" ) + geom_vline(xintercept=mLoEven,color="blue" ,linetype = "longdash") +
#   geom_line(data=fitHi,aes(x=xx,y=pdf),color="red") +
#   geom_line(data=fitLo,aes(x=xx,y=pdf),color="blue")
# Chunk 32
ggplot()+geom_freqpoly(aes(x=s$residuals),bins=30)
# Chunk 33
m = glmer(R ~ WordFreq  + (1|ParticipantIdentifier), data = results_ByFreq, family = Gamma(link=log))
s=summary(m)
c=s$coefficients
meanHi = exp(c["(Intercept)","Estimate"]) # intercept term
meanLo = exp(c["(Intercept)","Estimate"]+c["WordFreqLoFreq","Estimate"]) # intercept term + x=1
#dispersion is 1/shape parameter of gamma
sigma = 0.8826  # SD of residuals
shape = 1/sigma^2
rr=seq(cutoff,max(results_ByFreq$R),length=100)
fitHi = data.frame(rr)
fitHi$pdf = dgamma(rr,shape=shape,scale = meanHi/shape)
fitLo = data.frame(rr)
fitLo$pdf = dgamma(rr,shape=shape,scale = meanLo/shape)
ggplot()+geom_freqpoly(data=results_ByFreq,aes(x=R,y=..density..,color=WordFreq),bins=20)+
geom_line(data=fitHi,aes(x=rr,y=pdf),color="red")+
geom_line(data=fitLo,aes(x=rr,y=pdf),color="blue") +
geom_vline(xintercept=meanHi,color="red" ) + geom_vline(xintercept=meanLo,color="blue" )
# Chunk 34
m = glm(R ~ OrderCondition, data = results_AllFreq, family = Gamma(link=log))
meanClumped = exp(m$coefficients[1]) # intercept term
meanEven = exp(m$coefficients[1]+m$coefficients[2]) # intercept term + x=1
#dispersion is 1/shape parameter of gamma
shape = MASS::gamma.shape(m)$alpha
rr=seq(cutoff,max(results_AllFreq$R),length=100)
fitEven = data.frame(rr)
fitEven$pdf = dgamma(rr,shape=shape,scale = meanEven/shape)
fitClumped = data.frame(rr)
fitClumped$pdf = dgamma(rr,shape=shape,scale = meanClumped/shape)
ggplot()+geom_freqpoly(data=results_ByFreq,aes(x=R,y=..density..,color=WordFreq),bins=20)+
geom_line(data=fitClumped,aes(x=rr,y=pdf),color="red")+
geom_line(data=fitEven,aes(x=rr,y=pdf),color="blue") +
geom_vline(xintercept=meanEven,color="red" ) + geom_vline(xintercept=meanClumped,color="blue" )
# Chunk 35
results_AllFreq = results_AllFreq[order(results_AllFreq$CompletionDate),]
n = nrow(results_AllFreq)
p = replicate(n,NA)
for (j in 15:n) {
wR2 = wilcox.test(R~OrderCondition,data=results_AllFreq[1:j,])
p[j] = wR2$p.value
}
robustness = data.frame(ndata = seq(1:n), Rsignificance = p)
ggplot(data=robustness,aes(x=ndata,y=Rsignificance)) + geom_line(color="red") + geom_hline(yintercept = 0.05, color="blue")
rmarkdown::render(input = "ExploratoryAnalysis3.Rmd")
install.packages("optimx")
rmarkdown::render(input = "ExploratoryAnalysis3.Rmd")
rmarkdown::render(input = "ExploratoryAnalysis3.Rmd")
rmarkdown::render(input = "ExploratoryAnalysis3.Rmd")
1280/1024
3000/1280*2000
1280/3000*2000
1024/3000*2000
1024/2000*3000
1280/3*2
854/1280
1280/854
1280/855
1280/853
1024-853
171/2
86+853
install.packages("lmodel2")
lmodel2(formula = Prey ~ Predators, data = mod2ex2,
range.y = "relative", range.x = "relative", nperm = 99)
library(lmodel2)
lm2 = lmodel2(formula = AUROCnofit_HiFreq ~ AUROCnofit_LoFreq, data = freqresults, nperm = 99)
lm2
lm2[[MA]]
lm2$regression.results$Method
lm2$regression.results$Slope
lm2$regression.results$Slope[Method=="MA"]
lm2$regression.results$Slope[lm2$regression.results$Method=="MA"]
lm2
slope=lm2$regression.results$Slope[lm2$regression.results$Method=="MA"]
slope = lm2$regression.results$Slope[lm2$regression.results$Method=="MA"]
intercept = lm2$regression.results$Intercept[lm2$regression.results$Method=="MA"]
slope
intercept
lm2 = lmodel2(formula = AUROCnofit_HiFreq ~ AUROCnofit_LoFreq, nperm = 99, data = filter(freqresults,OrderCondition=="Clumped"))
lm2 = lmodel2(formula = AUROCnofit_HiFreq ~ AUROCnofit_LoFreq, nperm = 99, data = filter(freqresults,OrderCondition=="Clumped"))
slopeClumped = lm2$regression.results$Slope[lm2$regression.results$Method=="MA"]
interceptClumped = lm2$regression.results$Intercept[lm2$regression.results$Method=="MA"]
lm2 = lmodel2(formula = AUROCnofit_HiFreq ~ AUROCnofit_LoFreq, nperm = 99, data = filter(freqresults,OrderCondition=="Even"))
slopeEven = lm2$regression.results$Slope[lm2$regression.results$Method=="MA"]
interceptEven = lm2$regression.results$Intercept[lm2$regression.results$Method=="MA"]
ggplot(data=freqresults,aes(x=AUROCnofit_LoFreq,y=AUROCnofit_HiFreq,color=OrderCondition))+ geom_point() +
geom_abline(intercept=interceptEven,slope=slopeEven,color='r') +
geom_abline(intercept=interceptClumped,slope=slopeClumped,color='b') +
geom_abline(intercept=0,slope=1,color="black")
ggplot(data=freqresults,aes(x=AUROCnofit_LoFreq,y=AUROCnofit_HiFreq,color=OrderCondition))+ geom_point() +
geom_abline(intercept=interceptEven,slope=slopeEven,color='r') +
geom_abline(intercept=interceptClumped,slope=slopeClumped,color='b') +
geom_abline(intercept=0,slope=1,color="black")
ggplot(data=freqresults,aes(x=AUROCnofit_LoFreq,y=AUROCnofit_HiFreq,color=OrderCondition))+ geom_point()
ggplot(data=freqresults,aes(x=AUROCnofit_LoFreq,y=AUROCnofit_HiFreq,color=OrderCondition))+ geom_point() +
geom_abline(intercept=interceptEven,slope=slopeEven,color='r')
ggplot(data=freqresults,aes(x=AUROCnofit_LoFreq,y=AUROCnofit_HiFreq,color=OrderCondition))+ geom_point() +
geom_abline(intercept=interceptEven,slope=slopeEven,color='red') +
geom_abline(intercept=interceptClumped,slope=slopeClumped,color='blue') +
geom_abline(intercept=0,slope=1,color="black")
slopeEven
slopeClumped
rmarkdown::render(input = "ExploratoryAnalysis3.Rmd")
rmarkdown::render(input = "ExploratoryAnalysis3.Rmd")
install.packages("effectsize")
m = lme4::glmer(AUROCnorm ~ WordFreq+ OrderCondition +StartCondition + (1|ParticipantIdentifier), data = results_ByFreq, family = Gamma(link = log))
m = lme4::glmer(AUROCnorm ~ WordFreq+ StartCondition + (1|ParticipantIdentifier), data = results_ByFreq, family = Gamma(link = log))
summary(m)
m = lme4::glmer(AUROCnorm ~ WordFreq  + (1|ParticipantIdentifier), data = results_ByFreq, family = Gamma(link = log))
summary(m)
m0 = lme4::glmer(AUROCnorm ~  (1|ParticipantIdentifier), data = results_ByFreq, family = Gamma(link = log))
print(m0)
summary(m0)
summary(mFreq)
mFreq = lme4::glmer(AUROCnorm ~ WordFreq  + (1|ParticipantIdentifier), data = results_ByFreq, family = Gamma(link = log))
summary(mFreq)
anova(m0,mFeq)
anova(m0,mFreq)
summary(anova(m0,mFreq))
print(anova(mFreq,m0))
print(anova(mFreq,m0),test='F')
library(effectsize)
eta_squared(anova(mFreq,m0),partial=True)
install.packages("afex")
anova.glm(mFreq,m0)
install.packages("stats")
a=anova(m0,mFreq)
a
eta_squared(anova(mFreq,m0),partial=True)
aov(m0,mFreq)
a
a$deviance
getwd()
setwd("src")
debugSource("C:/Users/njcar/OneDrive - Newcastle University/Matlab files/Rcode/lib/FitExcelFile.R", echo=TRUE)
source("FitAllData.R")
install.packages("readxl")
source("FitAllData.R")
install.packages("Rcpp")
install.packages("Rcpp")
source("FitAllData.R")
source("MatchUpWithPptData.R")
# For some plots, we will want data in wider format
tmp = results[,c("ParticipantIdentifier","AUROCnofit","AUROC","R","dprime","WordFreq","OrderCondition")]
freqresults = pivot_wider(tmp,names_from="WordFreq",values_from=c("AUROCnofit","AUROC","R","dprime"))
these:
cutoff = 1e-2
results$dprime[results$dprime<cutoff] = cutoff
results$R[results$R<cutoff] = cutoff
# Some initial processing. First of all, logs can't cope with 0s so replace these:
cutoff = 1e-2
results$dprime[results$dprime<cutoff] = cutoff
results$R[results$R<cutoff] = cutoff
# Make a normalised AUROC
results$AUROCnorm = 2*(results$AUROC-0.5)
results$AUROCnorm[results$AUROCnorm<0]=0.1
# Our fitted AUROC should of course already be positive, but it ends up being -6.3342e-05 for some fits,
# I'm assuming due to rounding error etc.
# We will also be fitting separately for fits done using all data vs using subsets
results_AllFreq = results[results$WordFreq=="AllFreq",]
results_ByFreq = results[results$WordFreq!="AllFreq",]
library(lmerTest)
library(lmodel2)
ggplot(data=freqresults,aes(x=AUROCnofit_LoFreq,y=AUROCnofit_HiFreq,color=OrderCondition))+ geom_point() +
geom_abline(intercept=interceptEven,slope=slopeEven,color='blue') +
geom_abline(intercept=interceptClumped,slope=slopeClumped,color='red') +
geom_abline(intercept=0,slope=1,color="black")
r = cor.test(freqresults$AUROCnofit_LoFreq,freqresults$AUROCnofit_HiFreq,method = "spearman")
w= wilcox.test(freqresults$AUROCnofit_LoFreq,freqresults$AUROCnofit_HiFreq,paired=TRUE)
ggplot(data=freqresults,aes(x=AUROCnofit_LoFreq,y=AUROCnofit_HiFreq,color=OrderCondition))+ geom_point() +
geom_abline(intercept=interceptEven,slope=slopeEven,color='blue') +
geom_abline(intercept=interceptClumped,slope=slopeClumped,color='red') +
geom_abline(intercept=0,slope=1,color="black")
library(ggplot2)
ggplot(data=freqresults,aes(x=AUROCnofit_LoFreq,y=AUROCnofit_HiFreq,color=OrderCondition))+ geom_point() +
geom_abline(intercept=interceptEven,slope=slopeEven,color='blue') +
geom_abline(intercept=interceptClumped,slope=slopeClumped,color='red') +
geom_abline(intercept=0,slope=1,color="black")
lm2 = lmodel2(formula = AUROCnofit_HiFreq ~ AUROCnofit_LoFreq, nperm = 99, data = filter(freqresults,OrderCondition=="Clumped"))
slopeClumped = lm2$regression.results$Slope[lm2$regression.results$Method=="MA"]
interceptClumped = lm2$regression.results$Intercept[lm2$regression.results$Method=="MA"]
lm2 = lmodel2(formula = AUROCnofit_HiFreq ~ AUROCnofit_LoFreq, nperm = 99, data = filter(freqresults,OrderCondition=="Even"))
slopeEven = lm2$regression.results$Slope[lm2$regression.results$Method=="MA"]
interceptEven = lm2$regression.results$Intercept[lm2$regression.results$Method=="MA"]
ggplot(data=freqresults,aes(x=AUROCnofit_LoFreq,y=AUROCnofit_HiFreq,color=OrderCondition))+ geom_point() +
geom_abline(intercept=interceptEven,slope=slopeEven,color='blue') +
geom_abline(intercept=interceptClumped,slope=slopeClumped,color='red') +
geom_abline(intercept=0,slope=1,color="black")
ggplot(data=results_ByFreq,aes(x=OrderCondition,y=R,color=WordFreq)) + geom_violin()+ geom_quasirandom(dodge.width=0.8) + geom_boxplot(alpha=0)
library(ggplot2)
library(ggbeeswarm)
ggplot(data=results_ByFreq,aes(x=OrderCondition,y=R,color=WordFreq)) + geom_violin()+ geom_quasirandom(dodge.width=0.8) + geom_boxplot(alpha=0)
ggplot(data=results_ByFreq,aes(x=WordFreq,y=R,color=OrderCondition)) + geom_violin()+ geom_quasirandom(dodge.width=0.8) + geom_boxplot(alpha=0)
m = lme4::glmer(R ~  OrderCondition    + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log))
summary(m)
m = lme4::glmer(R ~  OrderCondition + WordFreq   + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log))
summary(m)
m = lme4::glmer(R ~  OrderCondition + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log))
summary(m)
m = glm(R ~  OrderCondition ,  data = results_AllFreq, family = Gamma(link=log))
summary(m)
ggplot(data=results_AllFreq,aes(x=OrderCondition,y=R)) + geom_violin()+ geom_quasirandom() + geom_boxplot(alpha=0)
ggplot(data=results_ByFreq,aes(x=OrderCondition,y=R,color=WordFreq)) + geom_violin()+ geom_quasirandom() + geom_boxplot(alpha=0)
ggplot(data=results_ByFreq,aes(x=OrderCondition,y=R)) + geom_violin()+ geom_quasirandom(aes(color=WordFreq)) + geom_boxplot(alpha=0)
ggplot(data=results_AllFreq,aes(x=OrderCondition,y=R)) + geom_violin()+ geom_quasirandom() + geom_boxplot(alpha=0)
m = glm(R ~  OrderCondition ,  data = results_AllFreq, family = Gamma(link=log))
summary(m)
m = glm(R ~  OrderCondition ,  data = results_ByFreq, family = Gamma(link=log))
summary(m)
ggplot(data=results_AllFreq,aes(x=OrderCondition,y=R)) + geom_violin()+ geom_quasirandom() + geom_boxplot(alpha=0)
m = glm(R ~  OrderCondition ,  data = results_ByFreq, family = Gamma(link=log))
summary(m)
ggplot(data=results_ByFreq,aes(x=OrderCondition,y=R)) + geom_violin()+ geom_quasirandom(aes(color=WordFreq)) + geom_boxplot(alpha=0)
m = lme4::glmer(R ~  OrderCondition + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log))
summary(m)
ggplot(data=results_ByFreq,aes(x=OrderCondition,y=R)) + geom_violin()+ geom_quasirandom(aes(color=WordFreq)) + geom_boxplot(alpha=0)
m = glm(R ~  OrderCondition ,  data = results_AllFreq, family = Gamma(link=log))
summary(m)
m = glm(R ~  OrderCondition ,  data = results_AllFreq, family = Gamma(link=log))
summary(m)
View(results_ByFreq)
m = lme4::glmer(R ~  OrderCondition + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log))
summary(m)
m = glm(R ~  OrderCondition ,  data = results_AllFreq, family = Gamma(link=log))
summary(m)
summary( glm(R ~  OrderCondition ,  data = results_ByFreq, family = Gamma(link=log)))
summary(lme4::glmer(R ~  OrderCondition + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log)))
summary(lme4::glmer(R ~  OrderCondition:WordFreq + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log)))
summary(lme4::glmer(R ~  OrderCondition*WordFreq + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log)))
summary(lme4::glmer(R ~  OrderCondition+WordFreq + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log)))
summary(lme4::glmer(R ~  OrderCondition:WordFreq + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log)))
summary(lme4::glmer(R ~  WordFreq:OrderCondition + (1|ParticipantIdentifier),  data = results_ByFreq, family = Gamma(link=log)))
q()
